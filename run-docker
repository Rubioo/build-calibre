#!/usr/bin/env python2
# vim:fileencoding=utf-8
# License: GPLv3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>

from __future__ import (unicode_literals, division, absolute_import,
                        print_function)

import sys
import os
import subprocess
import errno

base = os.path.dirname(os.path.abspath(__file__))


def abspath(x):
    return os.path.abspath(os.path.join(base, x))


def usage():
    raise SystemExit(
        'Usage: run-docker 32|64'
        ' [the rest of the command line is passed to main.py]'
    )

arch = sys.argv[1].decode('utf-8')
if arch not in '64 32'.split() or len(sys.argv) < 2:
    usage()


def mkdir(x):
    try:
        os.mkdir(abspath(x))
    except EnvironmentError as err:
        if err.errno == errno.EEXIST:
            return
        raise
    if 'SUDO_UID' in os.environ and os.geteuid() == 0:
        os.chown(abspath(x),
                 int(os.environ['SUDO_UID']), int(os.environ['SUDO_GID']))

mkdir('sources-cache')
mkdir('build')
output_dir = os.path.join(abspath('build'), 'linux' + arch)
mkdir(output_dir)

cmd = ('docker', 'run',
       '-v', abspath('sources-cache') + ':/sources:rw',
       '-v', abspath('scripts') + ':/scripts:ro',
       '-v', abspath('patches') + ':/patches:ro',
       '-v', output_dir + ':/sw:rw',
       '--rm=true',
       '--interactive=' + ('true' if sys.stdin.isatty() else 'false'),
       '--tty=' + ('true' if sys.stdin.isatty() else 'false'),
       'calibre:64',
       'python', '/scripts/main.py',
       )
cmd += tuple(sys.argv[2:])
print(*cmd)

raise SystemExit(subprocess.Popen(cmd).wait())
