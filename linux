#!/usr/bin/env python2
# vim:fileencoding=utf-8
# License: GPLv3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>

from __future__ import (absolute_import, division, print_function,
                        unicode_literals)

import atexit
import errno
import fcntl
import os
import pwd
import shlex
import shutil
import socket
import subprocess
import sys
import tempfile

base = os.path.dirname(os.path.abspath(__file__))


def abspath(x):
    return os.path.abspath(os.path.join(base, x))


def usage():
    raise SystemExit(
        ('Usage: %s 32|64'
         ' [the rest of the command line is passed to main.py]') % sys.argv[0])


arch = sys.argv[1].decode('utf-8')
if arch == 'shutdown':
    raise SystemExit(0)
if arch not in '64 32'.split() or len(sys.argv) < 2:
    usage()


def mkdir(x):
    try:
        os.mkdir(abspath(x))
    except EnvironmentError as err:
        if err.errno == errno.EEXIST:
            return
        raise
    if 'SUDO_UID' in os.environ and os.geteuid() == 0:
        os.chown(
            abspath(x),
            int(os.environ['SUDO_UID']), int(os.environ['SUDO_GID']))


mkdir('sources-cache')
mkdir('build')
mkdir('build/linux')
output_dir = os.path.join(abspath('build'), 'linux', arch)
mkdir(output_dir)
img_path = os.path.abspath(
    os.path.realpath(os.path.join(output_dir, 'container-1')))
sw_dir = os.path.join(output_dir, 'sw')
mkdir(sw_dir)

silent_calls = False


def call(*cmd):
    if len(cmd) == 1 and isinstance(cmd[0], basestring):
        cmd = shlex.split(cmd[0])
    if not silent_calls:
        print('\033[92m', end='')
        print(*cmd, end='\033[0m\n')
    ret = subprocess.Popen(cmd).wait()
    if ret != 0:
        raise SystemExit(ret)


def check_for_image(tag):
    return os.path.exists(img_path)


def build_container():
    cwd = os.getcwd()
    os.chdir(output_dir)
    image = 'ubuntu:trusty' if arch == '64' else 'daald/ubuntu32:trusty'
    user = pwd.getpwuid(os.geteuid()).pw_name
    call('sudo acbuild begin docker://' + image)
    try:
        call('sudo acbuild set-name kitty' + arch)
        call('sudo acbuild set-user ' + user)
        call('sudo acbuild set-group users')
        call('sudo acbuild set-exec /bin/zsh')
        call('sudo acbuild set-working-directory /tmp')
        for cmd in [
                # Basic build environment
                'apt-get update',
                'apt-get install -y build-essential cmake chrpath zsh wget python2.7',
                'apt-get install -y libfontconfig1-dev libxi-dev libxrandr-dev libxinerama-dev libxcursor-dev libunistring-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev mesa-common-dev libgl1-mesa-dev libpng-dev',  # noqa
                # Cleanup
                'apt-get clean',
                # User account
                'useradd --home-dir=/home/{0} --create-home --uid=1000 --gid=100 {0}'.format(user),
                'chsh -s /bin/zsh ' + user,
        ]:
            cmd = ['sudo', 'acbuild', 'run', '--'] + shlex.split(cmd)
            call(*cmd)
        root = '.acbuild/currentaci/rootfs'
        if os.path.exists(img_path):
            call('sudo', 'rm', '-rf', img_path)
        call('sudo', 'mv', root, img_path)
        call('sudo chown {}:{} {}'.format(os.getuid(), os.getgid(), img_path))
    finally:
        call('sudo acbuild end')
        os.chdir(cwd)


def get_mounts():
    ans = {}
    with open('/proc/self/mountinfo') as f:
        for line in f:
            line = line.decode('utf-8')
            parts = line.split()
            src, dest = parts[3:5]
            ans[os.path.abspath(os.path.realpath(dest))] = src
    return ans


def mount_all(tdir):
    global silent_calls
    silent_calls = True

    current_mounts = get_mounts()

    def mount(src, dest, readonly=False):
        dest = os.path.join(img_path, dest.lstrip('/'))
        if dest not in current_mounts:
            call('sudo', 'mkdir', '-p', dest)
            call('sudo', 'mount', '--bind', src, dest)
            if readonly:
                call('sudo', 'mount', '-o', 'remount,ro,bind', dest)

    def copy(src, dest):
        dest = os.path.join(img_path, dest.lstrip('/'))
        shutil.copytree(src, dest, symlinks=True, ignore=shutil.ignore_patterns(*'build dest'.split()))

    mount(tdir, '/tmp')
    mount(sw_dir, '/sw')
    mount('sources-cache', '/sources')
    mount('scripts', '/scripts', True)
    mount('patches', '/patches', True)
    kitty_dir = os.environ.get('KITTY_SRC_DIR', os.path.join('..', 'kitty'))
    if os.path.exists(os.path.join(kitty_dir, 'setup.py')):
        copy(kitty_dir, '/tmp/kitty')
    mount('/dev', '/dev')
    call('sudo', 'mount', '-t', 'proc', 'proc', os.path.join(img_path, 'proc'))
    call('sudo', 'mount', '-t', 'sysfs', 'sys', os.path.join(img_path, 'sys'))
    silent_calls = False


def umount_all():
    global silent_calls
    silent_calls = True
    for mp in get_mounts():
        if mp.startswith(img_path):
            call('sudo', 'umount', '-l', mp)
    silent_calls = False


def copy_terminfo():
    raw = subprocess.check_output(['infocmp']).decode('utf-8').splitlines()[0]
    path = raw.partition(':')[2].strip()
    if path and os.path.exists(path):
        bdir = os.path.basename(os.path.dirname(path))
        dest = os.path.join(img_path, 'usr/share/terminfo', bdir)
        call('sudo', 'mkdir', '-p', dest)
        call('sudo', 'cp', '-a', path, dest)


def shutdown():
    pass


def eintr_retry_call(func, *args, **kwargs):
    while True:
        try:
            return func(*args, **kwargs)
        except EnvironmentError as e:
            if getattr(e, 'errno', None) == errno.EINTR:
                continue
            raise


def singleinstance():
    name = 'build-kitty-%s-singleinstance' % arch
    if not isinstance(name, bytes):
        name = name.encode('utf-8')
    address = b'\0' + name.replace(b' ', b'_')
    sock = socket.socket(family=socket.AF_UNIX)
    try:
        eintr_retry_call(sock.bind, address)
    except socket.error as err:
        if getattr(err, 'errno', None) == errno.EADDRINUSE:
            return False
        raise
    fd = sock.fileno()
    old_flags = fcntl.fcntl(fd, fcntl.F_GETFD)
    fcntl.fcntl(fd, fcntl.F_SETFD, old_flags | fcntl.FD_CLOEXEC)
    atexit.register(sock.close)
    return True


if not singleinstance():
    raise SystemExit('Another instance of the linux container is running')

if sys.argv[2:] == ['container']:
    build_container()
    raise SystemExit(0)

if sys.argv[1:] == ['shutdown']:
    shutdown()
    raise SystemExit(0)

if not check_for_image(arch):
    build_container()


def run():
    global silent_calls
    silent_calls = True
    tdir = tempfile.mkdtemp()
    zshrc = os.path.realpath(os.path.expanduser('~/.zshrc'))
    if os.path.exists(zshrc):
        shutil.copy2(zshrc, os.path.join(tdir, '.zshrc'))
    else:
        os.touch(os.path.join(tdir, '.zshrc'))
    try:
        call('sudo', 'cp', '/etc/resolv.conf', os.path.join(img_path, 'etc'))
        mount_all(tdir)
        cmd = [
            'sudo', 'chroot',
            '--userspec={}:{}'.format(os.geteuid(), os.getegid()), img_path,
            '/usr/bin/env', '-i', 'HOME=/tmp', 'TERM=' + os.environ['TERM'], 'PATH=/bin:/usr/bin:/sbin:/usr/sbin',
            '/usr/bin/python2.7', '/scripts/main.py'
        ] + sys.argv[2:]
        copy_terminfo()
        os.environ.pop('LANG', None)
        for k in tuple(os.environ):
            if k.startswith('LC') or k.startswith('XAUTH'):
                del os.environ[k]
        call(*cmd)
    finally:
        umount_all()
        shutil.rmtree(tdir)


run()
